<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>de.codepitbull.vertx</groupId>
    <artifactId>http-test</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <gatling.version>2.1.4</gatling.version>
        <gatling-plugin.version>2.1.2</gatling-plugin.version>
        <vertx.version>3.0.0-milestone4</vertx.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.gatling.highcharts</groupId>
            <artifactId>gatling-charts-highcharts</artifactId>
            <version>${gatling.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>

        <pluginManagement>
            <plugins>
                <!-- We specify the Maven compiler plugin as we need to set it to Java 1.8 -->
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.1</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <!--
        You only need the part below if you want to build your application into a fat executable jar.
        This is a jar that contains all the dependencies required to run it, so you can just run it with
        java -jar
        -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>io.vertx.core.Starter</Main-Class>
                                        <Main-Verticle>io.vertx.example.HelloWorldVerticle</Main-Verticle>
                                    </manifestEntries>
                                </transformer>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>
                                </transformer>
                            </transformers>
                            <artifactSet>
                            </artifactSet>
                            <outputFile>${project.build.directory}/${artifactId}-${project.version}-fat.jar</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--<plugin>-->
                <!--<groupId>io.gatling</groupId>-->
                <!--<artifactId>gatling-maven-plugin</artifactId>-->
                <!--<version>${gatling-plugin.version}</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--&lt;!&ndash; default, can be omitted &ndash;&gt;-->
                        <!--<phase>integration-test</phase>-->
                        <!--<goals>-->
                            <!--<goal>execute</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->

            <plugin>
                <groupId>org.jolokia</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.11.3</version>

                <configuration>
                    <dockerHost>tcp://192.168.59.103:2376</dockerHost>
                    <images>
                        <image>
                            <registry>192.168.50.4:5000</registry>
                            <name>tester/test-fat</name>
                            <build>
                                <from>java:8</from>
                                <command>java -jar /maven/target/${project.build.finalName}-fat.jar</command>
                                <tags>
                                    <tag>latest</tag>
                                </tags>
                                <!-- The assembly descriptor prepares the "/maven" directory in the temporary data
                                   container which will be made available to the specified container. The startup script in the
                                   container (jolokia/tomcat-7.0) should check for files in this directory and use them
                                   for deploying them. I.e. this image has a script 'deploy-and-run.sh' which exactly
                                   does this. -->
                                <assembly>
                                    <descriptor>assembly.xml</descriptor>
                                </assembly>
                            </build>
                        </image>
                    </images>
                    <authConfig>
                        <username>test</username>
                        <password>test</password>
                    </authConfig>
                </configuration>

                <!-- Connect start/stop to pre- and
                     post-integration-test phase, respectively if you want to start
                     your docker containers during integration tests -->
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <!-- "build" should be used to create the images with the
                                 artefacts -->
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>

    </build>


</project>
